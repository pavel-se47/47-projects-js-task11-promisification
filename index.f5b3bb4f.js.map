{"mappings":"AAAA,MAAMA,EAAQC,GACL,IAAIC,SAAQC,IACjBC,YAAW,KACTD,EAAQF,EAAG,GACVA,EAAG,IAGJI,EAASC,GAAQC,QAAQC,IAAI,kBAAkBF,OAGrDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GCZjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,IAC1B,IAAIb,SAAQ,CAACC,EAASa,KAC3BF,EAASG,KAAIC,IACXA,EAAKP,OAASI,EACVZ,EAAQ,IAAKe,EAAMN,QAASM,EAAKN,SACjCI,EAAOE,EAAK,GAChB,IAIAC,EAASC,GAAgBb,QAAQc,MAAMD,GAS7CP,EAAqCH,EAAA,SAAAD,KAAAU,G,EACAT,EAAA,OAAAD,KAAAU,GC3BrC,MAIMG,EAAkBC,GACf,IAAIrB,SAAQ,CAACC,EAASa,KAC3B,MAAMQ,GANyBC,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADpB,IAACA,EAAKC,EAQpCtB,YAAW,KACUuB,KAAKE,SAAW,GAGjC1B,EAAQoB,EAAYO,GAAIN,GAExBR,EAAOO,EAAYO,GAAG,GAEvBN,EAAM,IAIPO,EAAa,CAACD,EAAIxB,KACtBC,QAAQC,IAAI,eAAesB,kBAAmBxB,MAAS,EAGnD0B,EAAWF,IACfvB,QAAQ0B,KAAK,gCAAgCH,6BAA8B,EAMnDR,EAAW,CAAIQ,GAAK,GAE9CI,OAAA,M,KAAsBH,GAAEI,MAAAH,G,EAAa,CAAIF,GAAK,GAE9CI,OAAA,M,KAAsBH,GAAEI,MAAAH,G,EAAY,CAAIF,GAAK,GAE7CI,OAAA,K,KAAsBH,GAAEI,MAAAH,G,EAAa,CAAIF,GAAK,GAG9CI,OAAA,MACAzB,KAAKsB,GAAAI,MAAAH","sources":["src/task-promis-11.1.js","src/task-promis-11.2.js","src/task-promis-11.3.js"],"sourcesContent":["const delay = ms => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise((resolve, reject) => {\r\n    allUsers.map(user => {\r\n      user.name === userName\r\n        ? resolve({ ...user, active: !user.active })\r\n        : reject(user);\r\n    });\r\n  });\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n\r\n// const users = [\r\n//   { name: 'Mango', active: true },\r\n//   { name: 'Poly', active: false },\r\n//   { name: 'Ajax', active: true },\r\n//   { name: 'Lux', active: false },\r\n// ];\r\n\r\n// const toggleUserState = (allUsers, userName, callback) => {\r\n//   const updatedUsers = allUsers.map(user =>\r\n//     user.name === userName ? { ...user, active: !user.active } : user\r\n//   );\r\n\r\n//   callback(updatedUsers);\r\n// };\r\n\r\n// const logger = updatedUsers => console.table(updatedUsers);\r\n\r\n// /*\r\n//  * Сейчас работает так\r\n//  */\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve(transaction.id, delay);\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = (id, time) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n\r\n// const randomIntegerFromInterval = (min, max) => {\r\n//   return Math.floor(Math.random() * (max - min + 1) + min);\r\n// };\r\n\r\n// const makeTransaction = (transaction, onSuccess, onError) => {\r\n//   const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//   setTimeout(() => {\r\n//     const canProcess = Math.random() > 0.3;\r\n\r\n//     if (canProcess) {\r\n//       onSuccess(transaction.id, delay);\r\n//     } else {\r\n//       onError(transaction.id);\r\n//     }\r\n//   }, delay);\r\n// };\r\n\r\n// const logSuccess = (id, time) => {\r\n//   console.log(`Transaction ${id} processed in ${time}ms`);\r\n// };\r\n\r\n// const logError = id => {\r\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n// };\r\n\r\n// /*\r\n//  * Работает так\r\n//  */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n"],"names":["$f04d317ecd12dfbd$var$delay","ms","Promise","resolve","setTimeout","$f04d317ecd12dfbd$var$logger","time","console","log","then","$eee315f7aaf40426$var$users","name","active","$eee315f7aaf40426$var$toggleUserState","allUsers","userName","reject","map","user","$eee315f7aaf40426$var$logger","updatedUsers","table","$7f4100400165916a$var$makeTransaction","transaction","delay","min","max","Math","floor","random","id","$7f4100400165916a$var$logSuccess","$7f4100400165916a$var$logError","warn","amount","catch"],"version":3,"file":"index.f5b3bb4f.js.map"}