{"mappings":"YAAA,IAIMA,EAAkB,SAAAC,GACtB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAN+BC,EAAKC,EAM9BC,GANyBF,EAMS,IANJC,EAMS,IALxCE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IAOlDM,YAAW,WACUH,KAAKE,SAAW,GAGjCP,EAAQF,EAAYW,GAAIL,GAExBH,EAAOH,EAAYW,G,GAEpBL,E,KAIDM,EAAa,SAACD,EAAIE,GACtBC,QAAQC,IAAI,eAAkCC,OAAnBL,EAAG,kBAAqBK,OAALH,EAAK,M,EAG/CI,EAAW,SAAAN,GACfG,QAAQI,KAAK,gCAAmCF,OAAHL,EAAG,6B,EAMxBZ,EAAW,CAAIY,GAAK,GAE9CQ,OAAA,M,KAAsBP,GAAEQ,MAAAH,G,EAAa,CAAIN,GAAK,GAE9CQ,OAAA,M,KAAsBP,GAAEQ,MAAAH,G,EAAY,CAAIN,GAAK,GAI7CQ,OAAA,KACAE,KAAAT,GAAAQ,MAAAH,E","sources":["src/task-promis-11.3.js"],"sourcesContent":["const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve(transaction.id, delay);\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = (id, time) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\n// makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n\r\n// const randomIntegerFromInterval = (min, max) => {\r\n//   return Math.floor(Math.random() * (max - min + 1) + min);\r\n// };\r\n\r\n// const makeTransaction = (transaction, onSuccess, onError) => {\r\n//   const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//   setTimeout(() => {\r\n//     const canProcess = Math.random() > 0.3;\r\n\r\n//     if (canProcess) {\r\n//       onSuccess(transaction.id, delay);\r\n//     } else {\r\n//       onError(transaction.id);\r\n//     }\r\n//   }, delay);\r\n// };\r\n\r\n// const logSuccess = (id, time) => {\r\n//   console.log(`Transaction ${id} processed in ${time}ms`);\r\n// };\r\n\r\n// const logError = id => {\r\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n// };\r\n\r\n// /*\r\n//  * Работает так\r\n//  */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n"],"names":["$ee559f12aebe82bc$var$makeTransaction","transaction","Promise","resolve","reject","min","max","delay","Math","floor","random","setTimeout","id","$ee559f12aebe82bc$var$logSuccess","time","console","log","concat","$ee559f12aebe82bc$var$logError","warn","amount","catch","then"],"version":3,"file":"index.783c66e9.js.map"}