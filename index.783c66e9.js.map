{"mappings":"YAAA,IAIMA,EAAkB,SAAAC,GACtB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAN+BC,EAAKC,EAM9BC,GANyBF,EAMS,IANJC,EAMS,IALxCE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IAOlDM,YAAW,WACUH,KAAKE,SAAW,GAGjCP,EAAQF,EAAYW,GAAIL,GAExBH,EAAOH,EAAYW,G,GAEpBL,E,KAIDM,EAAa,SAACD,EAAIE,GACtBC,QAAQC,IAAI,eAAkCC,OAAnBL,EAAG,kBAAqBK,OAALH,EAAK,M,EAG/CI,EAAW,SAAAN,GACfG,QAAQI,KAAK,gCAAmCF,OAAHL,EAAG,6B,EAMlDZ,EAAgB,CAAEY,GAAI,GAAIQ,OAAQ,MAAOC,KAAKR,GAAYS,MAAMJ,GAEhElB,EAAgB,CAAEY,GAAI,GAAIQ,OAAQ,MAAOC,KAAKR,GAAYS,MAAMJ,GAEhElB,EAAgB,CAAEY,GAAI,GAAIQ,OAAQ,KAAMC,KAAKR,GAAYS,MAAMJ,E","sources":["src/task-promis-11.3.js"],"sourcesContent":["const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve(transaction.id, delay);\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = (id, time) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\n// makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n\n// const randomIntegerFromInterval = (min, max) => {\n//   return Math.floor(Math.random() * (max - min + 1) + min);\n// };\n\n// const makeTransaction = (transaction, onSuccess, onError) => {\n//   const delay = randomIntegerFromInterval(200, 500);\n\n//   setTimeout(() => {\n//     const canProcess = Math.random() > 0.3;\n\n//     if (canProcess) {\n//       onSuccess(transaction.id, delay);\n//     } else {\n//       onError(transaction.id);\n//     }\n//   }, delay);\n// };\n\n// const logSuccess = (id, time) => {\n//   console.log(`Transaction ${id} processed in ${time}ms`);\n// };\n\n// const logError = id => {\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\n// };\n\n// /*\n//  * Работает так\n//  */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n"],"names":["$ee559f12aebe82bc$var$makeTransaction","transaction","Promise","resolve","reject","min","max","delay","Math","floor","random","setTimeout","id","$ee559f12aebe82bc$var$logSuccess","time","console","log","concat","$ee559f12aebe82bc$var$logError","warn","amount","then","catch"],"version":3,"file":"index.783c66e9.js.map"}