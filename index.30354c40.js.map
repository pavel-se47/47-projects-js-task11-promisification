{"mappings":"AAAA,MAAMA,EAAQC,GACL,IAAIC,SAAQC,IACjBC,YAAW,KACTD,EAAQF,EAAG,GACVA,EAAG,IAGJI,EAASC,GAAQC,QAAQC,IAAI,kBAAkBF,OAGrDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GCWjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,IAC1B,IAAIb,SAAQ,CAACC,EAASa,KAC3BF,EAASG,KAAIC,IACXA,EAAKP,OAASI,EACVZ,EAAQ,IAAKe,EAAMN,QAASM,EAAKN,SACjCI,EAAOE,EAAK,GAChB,IAIAC,EAASC,GAAgBb,QAAQc,MAAMD,GAK7CP,EAAgBH,EAAO,SAASD,KAAKU,GACrCN,EAAgBH,EAAO,OAAOD,KAAKU,GC9CnC,MAIMG,EAAkBC,GACf,IAAIrB,SAAQ,CAACC,EAASa,KAC3B,MAAMQ,GANyBC,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADpB,IAACA,EAAKC,EAQpCtB,YAAW,KACUuB,KAAKE,SAAW,GAGjC1B,EAAQoB,EAAYO,GAAIN,GAExBR,EAAOO,EAAYO,GAAG,GAEvBN,EAAM,IAIPO,EAAa,CAACD,EAAIxB,KACtBC,QAAQC,IAAI,eAAesB,kBAAmBxB,MAAS,EAGnD0B,EAAWF,IACfvB,QAAQ0B,KAAK,gCAAgCH,6BAA8B,EAM7ER,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOzB,KAAKsB,GAAYI,MAAMH,GAEhEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOzB,KAAKsB,GAAYI,MAAMH,GAEhEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAAMzB,KAAKsB,GAAYI,MAAMH","sources":["src/task-promis-11.1.js","src/task-promis-11.2.js","src/task-promis-11.3.js"],"sourcesContent":["const delay = ms => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n};\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n","// const users = [\n//   { name: 'Mango', active: true },\n//   { name: 'Poly', active: false },\n//   { name: 'Ajax', active: true },\n//   { name: 'Lux', active: false },\n// ];\n\n// const toggleUserState = (allUsers, userName, callback) => {\n//   const updatedUsers = allUsers.map(user =>\n//     user.name === userName ? { ...user, active: !user.active } : user\n//   );\n\n//   callback(updatedUsers);\n// };\n\n// const logger = updatedUsers => console.table(updatedUsers);\n\n// /*\n//  * Сейчас работает так\n//  */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise((resolve, reject) => {\n    allUsers.map(user => {\n      user.name === userName\n        ? resolve({ ...user, active: !user.active })\n        : reject(user);\n    });\n  });\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve(transaction.id, delay);\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = (id, time) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\n// makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n\n// const randomIntegerFromInterval = (min, max) => {\n//   return Math.floor(Math.random() * (max - min + 1) + min);\n// };\n\n// const makeTransaction = (transaction, onSuccess, onError) => {\n//   const delay = randomIntegerFromInterval(200, 500);\n\n//   setTimeout(() => {\n//     const canProcess = Math.random() > 0.3;\n\n//     if (canProcess) {\n//       onSuccess(transaction.id, delay);\n//     } else {\n//       onError(transaction.id);\n//     }\n//   }, delay);\n// };\n\n// const logSuccess = (id, time) => {\n//   console.log(`Transaction ${id} processed in ${time}ms`);\n// };\n\n// const logError = id => {\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\n// };\n\n// /*\n//  * Работает так\n//  */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n"],"names":["$f04d317ecd12dfbd$var$delay","ms","Promise","resolve","setTimeout","$f04d317ecd12dfbd$var$logger","time","console","log","then","$eee315f7aaf40426$var$users","name","active","$eee315f7aaf40426$var$toggleUserState","allUsers","userName","reject","map","user","$eee315f7aaf40426$var$logger","updatedUsers","table","$7f4100400165916a$var$makeTransaction","transaction","delay","min","max","Math","floor","random","id","$7f4100400165916a$var$logSuccess","$7f4100400165916a$var$logError","warn","amount","catch"],"version":3,"file":"index.30354c40.js.map"}